#if defined __autogenerated_methodmap_CTakeDamageInfo_included
	#endinput
#endif

#define __autogenerated_methodmap_CTakeDamageInfo_included

/**
 * CTakeDamageInfo instance members.  These can be used to dynamically update the offsets if
 * necessary, such as through gameconf.
 */
any offs_CTakeDamageInfo_m_vecDamageForce = 0;
any offs_CTakeDamageInfo_m_vecDamagePosition = 12;
any offs_CTakeDamageInfo_m_vecReportedPosition = 24;
any offs_CTakeDamageInfo_m_hInflictor = 36;
any offs_CTakeDamageInfo_m_hAttacker = 40;
any offs_CTakeDamageInfo_m_hWeapon = 44;
any offs_CTakeDamageInfo_m_flDamage = 48;
any offs_CTakeDamageInfo_m_flMaxDamage = 52;
any offs_CTakeDamageInfo_m_flBaseDamage = 56;
any offs_CTakeDamageInfo_m_bitsDamageType = 60;
any offs_CTakeDamageInfo_m_iDamageCustom = 64;
any offs_CTakeDamageInfo_m_iDamageStats = 68;
any offs_CTakeDamageInfo_m_iAmmoType = 72;
any offs_CTakeDamageInfo_m_iDamagedOtherPlayers = 76;
any offs_CTakeDamageInfo_m_iPlayerPenetrationCount = 80;
any offs_CTakeDamageInfo_m_flDamageBonus = 84;
any offs_CTakeDamageInfo_m_hDamageBonusProvider = 88;
any offs_CTakeDamageInfo_m_bForceFriendlyFire = 92;
any offs_CTakeDamageInfo_m_flDamageForForce = 96;
any offs_CTakeDamageInfo_m_eCritType = 100;

#if !defined __autogenerated_methodmap_array_float3_included
#define __autogenerated_methodmap_array_float3_included
/**
 * Methodmap that implements a wrapper around a float[3] array to expose get / set
 * functions.
 */
methodmap IMPL_internal_method_array_float3 {
	property Address Address {
		public get() {
			return view_as<Address>(this);
		}
	}
	public void Get(float value[3]) {
		for (int i; i < 3; i++) {
			value[i] = view_as<float>(LoadFromAddress(this.Address + view_as<Address>(4 * i), NumberType_Int32));
		}
	}
	public void Set(const float value[3]) {
		for (int i; i < 3; i++) {
			StoreToAddress(this.Address + view_as<Address>(4 * i), view_as<any>(value[i]), NumberType_Int32);
		}
	}
	public float GetIndex(int index) {
		if (index < 0 || index >= 3) {
			ThrowError("Index %d is out of bounds (limit 3)", index);
		}
		return view_as<float>(LoadFromAddress(this.Address + view_as<Address>(4 * index), NumberType_Int32));
	}
	public void SetIndex(int index, float value) {
		if (index < 0 || index >= 3) {
			ThrowError("Index %d is out of bounds (limit 3)", index);
		}
		StoreToAddress(this.Address + view_as<Address>(4 * index), view_as<any>(value), NumberType_Int32);
	}
}
#endif

/**
 * This is an autogenerated methodmap to access the properties of an in-memory
 * CTakeDamageInfo instance.
 */
methodmap CTakeDamageInfo {
	/**
	 * Returns the address casted to a CTakeDamageInfo methodmap instance.
	 */
	public static CTakeDamageInfo FromAddress(Address pInstance) {
		return view_as<CTakeDamageInfo>(pInstance);
	}
	
	/**
	 * Developers may want to implement their own methods on this methodmap; they can be
	 * automatically included here.
	 */
	//#tryinclude "classmethods/CTakeDamageInfo.sp"
	
	property Address Address {
		public get() {
			return view_as<Address>(this);
		}
	}
	
	property IMPL_internal_method_array_float3 m_vecDamageForce {
		public get() {
			return view_as<IMPL_internal_method_array_float3>(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_vecDamageForce));
		}
	}
	
	property IMPL_internal_method_array_float3 m_vecDamagePosition {
		public get() {
			return view_as<IMPL_internal_method_array_float3>(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_vecDamagePosition));
		}
	}
	
	property IMPL_internal_method_array_float3 m_vecReportedPosition {
		public get() {
			return view_as<IMPL_internal_method_array_float3>(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_vecReportedPosition));
		}
	}
	
	property int m_hInflictor {
		public get() {
			return view_as<int>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_hInflictor), NumberType_Int32));
		}
		public set(int value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_hInflictor), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property int m_hAttacker {
		public get() {
			return view_as<int>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_hAttacker), NumberType_Int32));
		}
		public set(int value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_hAttacker), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property int m_hWeapon {
		public get() {
			return view_as<int>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_hWeapon), NumberType_Int32));
		}
		public set(int value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_hWeapon), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property float m_flDamage {
		public get() {
			return view_as<float>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_flDamage), NumberType_Int32));
		}
		public set(float value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_flDamage), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property float m_flMaxDamage {
		public get() {
			return view_as<float>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_flMaxDamage), NumberType_Int32));
		}
		public set(float value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_flMaxDamage), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property float m_flBaseDamage {
		public get() {
			return view_as<float>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_flBaseDamage), NumberType_Int32));
		}
		public set(float value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_flBaseDamage), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property int m_bitsDamageType {
		public get() {
			return view_as<int>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_bitsDamageType), NumberType_Int32));
		}
		public set(int value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_bitsDamageType), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property int m_iDamageCustom {
		public get() {
			return view_as<int>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_iDamageCustom), NumberType_Int32));
		}
		public set(int value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_iDamageCustom), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property int m_iDamageStats {
		public get() {
			return view_as<int>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_iDamageStats), NumberType_Int32));
		}
		public set(int value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_iDamageStats), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property int m_iAmmoType {
		public get() {
			return view_as<int>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_iAmmoType), NumberType_Int32));
		}
		public set(int value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_iAmmoType), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property int m_iDamagedOtherPlayers {
		public get() {
			return view_as<int>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_iDamagedOtherPlayers), NumberType_Int32));
		}
		public set(int value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_iDamagedOtherPlayers), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property int m_iPlayerPenetrationCount {
		public get() {
			return view_as<int>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_iPlayerPenetrationCount), NumberType_Int32));
		}
		public set(int value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_iPlayerPenetrationCount), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property float m_flDamageBonus {
		public get() {
			return view_as<float>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_flDamageBonus), NumberType_Int32));
		}
		public set(float value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_flDamageBonus), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property int m_hDamageBonusProvider {
		public get() {
			return view_as<int>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_hDamageBonusProvider), NumberType_Int32));
		}
		public set(int value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_hDamageBonusProvider), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property bool m_bForceFriendlyFire {
		public get() {
			return view_as<bool>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_bForceFriendlyFire), NumberType_Int8));
		}
		public set(bool value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_bForceFriendlyFire), view_as<any>(value), NumberType_Int8);
		}
	}
	
	property float m_flDamageForForce {
		public get() {
			return view_as<float>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_flDamageForForce), NumberType_Int32));
		}
		public set(float value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_flDamageForForce), view_as<any>(value), NumberType_Int32);
		}
	}
	
	property int m_eCritType {
		public get() {
			return view_as<int>(LoadFromAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_eCritType), NumberType_Int32));
		}
		public set(int value) {
			StoreToAddress(this.Address + view_as<Address>(offs_CTakeDamageInfo_m_eCritType), view_as<any>(value), NumberType_Int32);
		}
	}
	
	public static int GetClassSize() {
		return 104;
	}
}
